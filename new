http://www.dannemanne.com/posts/post-deployment_script_on_elastic_beanstalk_restart_delayed_job
http://junkheap.net/blog/2013/05/20/elastic-beanstalk-post-deployment-scripts/

http://www.eq8.eu/blogs/29-aws-elasticbeanstalk-deployment-hooks


#!/usr/bin/env bash
rabbitmqcontainerid=$( docker ps -a -q  --filter ancestor=rabbitmq:3-management)
docker exec $rabbitmqcontainerid bash /root/bin/join_cluster.sh $(bash /root/find_hosts.sh)



post deployment


#!/usr/bin/env bash
    export AWS_DEFAULT_REGION='${region}'

    jsonresponse=$(aws elasticbeanstalk describe-environment-resources --environment-name Rabbitmqcluster-dev)
    autscalinggroupname=`echo $jsonresponse | jq ".EnvironmentResources.AutoScalingGroups[].Name"`
    DNSES=$(aws ec2 describe-instances --filters "Name=tag:aws:autoscaling:groupName,Values=$autscalinggroupname" "Name=instance-state-name,Values=running" | jq ".Reservations[].Instances[].PrivateDnsName" | xargs)
	
	HOSTNAMES=()
    for dns in $DNSES; do
       hostname=($${dns//./ })
       if [ \"$hostname\" != \"$HOSTNAME\" ]; then
        HOSTNAMES+=( $hostname )
       fi
    done
    echo $HOSTNAMES
	
	rabbitmqcontainerid=$( docker ps -a -q  --filter ancestor=rabbitmq:3-management)
	
	for run in {1..3}; do
		sleep $[ ( $RANDOM % 10 )  + 1 ]s

		docker exec $rabbitmqcontainerid bash rabbitmqctl stop_app
		
		NEW_HOSTNAMES=()
		
		for hostname in $HOSTNAMES; do
		
			docker exec $rabbitmqcontainerid bash rabbitmqctl join_cluster rabbit@$hostname
			st=$?
			if [ $st -ne 0 ] && [ $st -ne 130 ]; then  # 130 is \"already joined\"
				NEW_HOSTNAMES+=( $hostname )
			fi
		done
		 
		HOSTNAMES=( $${NEW_HOSTNAMES[@]} )
		
		docker exec $rabbitmqcontainerid bash rabbitmqctl start_app
	done
